4001. Ceil in BST || Medium || Use Iterative Approach || *
4001. a. Recursive Approach
TC: O(logN) // best case, if tree is balanced 
TC: O(n) // worst case, if tree is skeewed
SC: O(logN, or N)

class Tree {
    // Function to return the ceil of given number in BST.
    int ans = Integer.MAX_VALUE;
    void traverse(Node root, int key){
        if(root == null) return;
        
        if(root.data == key){
            ans = key;
            return;
        }else if(root.data > key){
            ans = Math.min(ans,root.data);
            traverse(root.left, key);
        }else{
            traverse(root.right, key);
        }
    }
    int findCeil(Node root, int key) {
        traverse(root, key);
        return ans == Integer.MAX_VALUE ? -1 : ans;
    }
}

4001. b. Iterative Approach
TC: O(logN) // best case, if tree is balanced 
TC: O(n) // worst case, if tree is skeewed
SC: O(1)

    int findCeil(Node root, int key) {
        int ceil = -1;
        while(root != null){
            if(root.data == key){
                return root.data;
            }else if(root.data > key){
                ceil = root.data;
                root = root.left;
            }else{
                root = root.right;
            }
        }
        return ceil;
    }

4002. Floor in BST
//Iterative Approach
TC: O(logN) // best case, if tree is balanced 
TC: O(n) // worst case, if tree is skeewed
SC: O(1)
    public static int floor(Node root, int x) {
        int floor = -1;
        while(root != null){
            if(root.data == x){
                floor = root.data;
                break;
            }else if(root.data < x){
                floor = root.data;
                root = root.right;
            }else{
                root = root.left;
            }
        }
        return floor;
    }
4003. Insert into a Binary Search Tree
4003.a 
//Recursive Approach
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root == null) return new TreeNode(val);

        if(val < root.val){
            root.left = insertIntoBST(root.left, val);
        }else{
            root.right = insertIntoBST(root.right, val);
        }

        return root;
    }

4003.b. 
//Iterative Approach
TC: O(logN) // best case, if tree is balanced 
TC: O(n) // worst case, if tree is skeewed
SC: O(1)
    public TreeNode insertIntoBST(TreeNode root, int val) {
        TreeNode rootCopy = root;
        TreeNode newNode = new TreeNode(val);
        if(root == null) return newNode;

        while(root != null){
            if(root.val < val){
                if(root.right == null){
                    root.right = newNode;
                    break;
                }else root = root.right;
            }else{
                if(root.left == null){
                    root.left = newNode;
                    break;
                }else root = root.left;
            }
        }
        return rootCopy;
    }


4004.Kth Smallest Element in a BST || Medium || *
4004.a Iterative Approach
TC: O(n)
SC: O(n)
    public int kthSmallest(TreeNode root, int k) {
        Stack<TreeNode> st = new Stack<>();
        int counter = 0;
        while(root != null || !st.isEmpty()){
            while(root != null ){
                st.push(root);
                root = root.left;
            }
            root = st.pop();
            counter++;
            if(counter == k) return root.val;
            root = root.right; //remember to shift to right
        }
        return sorted.get(k-1);
    }

4004.b Morris traversal
TC: O(n)
SC: O(1)
    public int kthSmallest(TreeNode root, int k) {
        int counter = 0;

        while(root != null){
            if(root.left == null){
                counter++;
                if(counter == k) return root.val;
                root = root.right;
            }else{
                TreeNode rightMost = root.left;
                while(rightMost.right != null && rightMost.right != root){
                    rightMost = rightMost.right;
                }

                if(rightMost.right == null){
                    rightMost.right = root;
                    root = root.left;
                }else{
                    rightMost.right = null;
                    counter++;
                    if(counter == k) return root.val;
                    root = root.right;
                }
            }
        }
        return -1;
    }

4005.Validate Binary Search Tree || Easy || *
4005.a Iterative traversal
TC: O(n)
SC: O(n)

    public boolean isValidBST(TreeNode root) {
        long prev = Long.MIN_VALUE;
        Stack<TreeNode> st = new Stack<>();
        while(root != null || !st.isEmpty()){
            while(root != null){
                st.push(root);
                root = root.left;
            }  

            root = st.pop();
            if(root.val <= prev) return false;
            prev = root.val;
            root = root.right;
        }
        return true;
    }

4005.b Morris traversal
TC: O(n)
SC: O(1)

public boolean isValidBST(TreeNode root) {
        long prev = Long.MIN_VALUE;

        while(root != null){
            if(root.left == null){
                if(prev >= root.val) return false;
                prev = root.val;
                root = root.right;
            }else{
                TreeNode rightMost = root.left;

                while(rightMost.right != null && rightMost.right != root){
                    rightMost = rightMost.right;
                }

                if(rightMost.right == null){
                    rightMost.right = root;
                    root = root.left;
                }else{
                    rightMost.right = null;
                    if(prev >= root.val) return false;
                    prev = root.val;
                    root = root.right;
                }
            }
        }

        return true;
    }

4005.c Bound Traversal
TC: O(N)
SC: O(1 + auxillary space)

class Solution {
    int i = 0;
    private TreeNode construct(int[] preOrder, int bound){
        if(preOrder.length <= i || preOrder[i] > bound) return null;
        TreeNode root = new TreeNode(preOrder[i++]);
        // if(i >= preOrder.length) return root;
        root.left = construct(preOrder, root.val);
        root.right = construct(preOrder, bound);
        return root;
    }
    public TreeNode bstFromPreorder(int[] preOrder) {
        return construct(preOrder, Integer.MAX_VALUE);
    }
}

4006. Construct Binary Search Tree from Preorder Traversal

4006.a Complexity to be decided 
TC: 
SC: 

class Solution {
    private TreeNode generateBST(int[] preOrder, int l , int r){
        if(l == r) return new TreeNode(preOrder[l]);
        if(l > r) return null;

        TreeNode root = new TreeNode(preOrder[l]);

        int k = l + 1;;
        while(k <= r && preOrder[k] < preOrder[l]) k++;

        root.left = generateBST(preOrder, l+1, k-1);
        root.right = generateBST(preOrder, k , r);

        return root;
    }
    public TreeNode bstFromPreorder(int[] preOrder) {
        return generateBST(preOrder, 0 , preOrder.length-1);
    }
}

4006. b. 
TC: O(N)
SC: O(1 + auxillary)
class Solution {
    int i = 0;
    private TreeNode construct(int[] preOrder, int bound){
        if(preOrder.length <= i || preOrder[i] > bound) return null;
        TreeNode root = new TreeNode(preOrder[i++]);
        root.left = construct(preOrder, root.val);
        root.right = construct(preOrder, bound);
        return root;
    }
    public TreeNode bstFromPreorder(int[] preOrder) {
        return construct(preOrder, Integer.MAX_VALUE);
    }
}