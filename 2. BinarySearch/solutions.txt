2001. Binary Search

class Solution {
    public int search(int[] nums, int target) {
        int low = 0 , high = nums.length-1, mid = 0;
        while(low <= high){
            mid = low + (high-low)/2;
            if(nums[mid] == target){
                return mid;
            }else if(nums[mid] > target){
                high = mid -1;
            }else{
                low = mid+1;
            }
        }
        return -1;
    }
}

2002. Lower Bound *** | Medium
2002. A.
class Solution {
    static int findFloor(long arr[], int n, long x) {
        int ans = -1;
        int low = 0 , high = arr.length -1 ;
        while(low <= high){
            int mid = low + (high - low)/2;
            if(arr[mid] == x){
                return mid;
            }else if(arr[mid] < x){
                ans = mid;
                low = mid+1;
            } else {
                high = mid-1;
            }
        }
        return ans;
    }
}

2002. B.
class Solution {
    static int findFloor(long arr[], int n, long x) {
        int ans = -1;
        int low = 0 , high = arr.length -1 ;
        while(low <= high){
            int mid = low + (high - low)/2;
            if(arr[mid] <= x){
                ans = mid;
                low = mid+1;
            } else {
                high = mid-1;
            }
        }
        return ans;
    }
}

2002. C.
//Utilizez concept of bounds
class Solution {
    static int findFloor(long arr[], int n, long x) {
        int low = 0 , high = arr.length -1 ;
        while(low <= high){
            int mid = low + (high - low)/2;
            if(arr[mid] <= x){
                low = mid+1;
            } else {
                high = mid-1;
            }
        }
        return high;
    }
}

2003. Upper Bound | Medium
    public static int upperBound(int []arr, int x, int n){
        int low = 0 , high = n -1 ;
        while(low <= high){
            int mid = low + (high - low)/2;
            if(arr[mid] > x){
                high = mid - 1;
            }else{
                low = mid + 1;
            }
        }
        return low;
    }

2006. Find First and Last Position of Element in Sorted Array
TC: O(2*logN)
SC: O(1)
class Solution {
    private int upperBound(int[] nums, int target){
        int low = 0 , high = nums.length - 1;
        while(low <= high){
            int mid = low + (high-low)/2;
            if(nums[mid] <= target) low = mid + 1;
            else    high = mid - 1;
        }
        return high;
    }
    private int lowerBound(int[] nums, int target){
        int low = 0 , high = nums.length - 1;
        while(low <= high){
            int mid = low + (high-low)/2;
            if(nums[mid] < target) low = mid + 1;
            else high = mid - 1;
        }
        return low;
    }
    public int[] searchRange(int[] nums, int target) {
        int n = nums.length;
        int[] ans = new int[2];
        int l = lowerBound(nums, target);
        if(l == n || nums[l] != target) return new int[]{-1,-1};
        ans[0] = l;
        int r = upperBound(nums,target);
        ans[1] = r;
        return ans;
    }
}