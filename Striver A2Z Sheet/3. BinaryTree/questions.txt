3020.Morris Inorder Traversal of a Binary Tree || Medium || ***
//Important reduces the space complexity to O(1)

3001.Binary Tree Preorder Traversal || Easy

	
Inorder Traversal of Binary Tree

Post-order Traversal of Binary Tree

	
Level order Traversal 

Iterative Inorder Traversal of Binary Tree

Diameter of Binary Tree || Easy || *
//Calculation is important
https://leetcode.com/problems/diameter-of-binary-tree/description/

Binary Tree Maximum Path Sum || Hard || *
//Calculation logic is important
https://leetcode.com/problems/binary-tree-maximum-path-sum/

Same Tree || Easy
https://leetcode.com/problems/same-tree/

Binary Tree Zigzag Level Order Traversal || Easy
//its Collections.reverse()
https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/description/

Vertical Order Traversal of Binary Tree || Easy || **
//Code Implementation could be long
https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/

Top View of Binary Tree || Easy 
//geeksforgeeks required static class
https://www.geeksforgeeks.org/problems/top-view-of-binary-tree/1

Bottom View of Binary Tree || Easy
//Similar to above question
https://www.geeksforgeeks.org/problems/bottom-view-of-binary-tree/1

Binary Tree Right Side View || Easy
//Similar Easy logic to above
https://leetcode.com/problems/binary-tree-right-side-view/description/

Symmetric Tree || Easy
//Simple recursion

Lowest Common Ancestor of a Binary Tree || Medium || ***
//Both the node exist in tree
//Intution: if left return a non null -> 1 node found in left, or it is the LCA
//if left and right return a non null -> then current root is the LCA
https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/description/



