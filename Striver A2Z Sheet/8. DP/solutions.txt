8001. Climbing Stars || EASY
    public int climbStairs(int n) {
        if(n == 1) return 1;
        if(n == 2) return 2;

        int[] dp = new int[n];
        dp[0] = 1;
        dp[1] = 2;

        for(int i = 2 ; i < n ; i++){
            dp[i] = dp[i-1] + dp[i-2];
        }

        return dp[n-1];
    }

8002. Frog Jump || EASY || *
    public int minimumEnergy(int arr[],int n){
        
        int[] dp = new int[n];
        dp[0] = 0;
        if(n==1) return dp[0];
        dp[1] = Math.abs(arr[1]-arr[0]); //************ can reach from 1 step only, not from ground
        if(n==2) return dp[1];
        
        for(int i = 2 ; i < n ; i++){
            dp[i] = Math.min(
                dp[i-1] + Math.abs(arr[i-1] - arr[i]),
                dp[i-2] + Math.abs(arr[i-2] - arr[i])
                );
            
        }
        
        return dp[n-1];
        
    }

8003. Frog Jump with k distances
public int minimizeCost(int k, int arr[]) {
        int n = arr.length;
        int[] dp = new int[n];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for(int i = 0 ; i < n ; i++){
            for(int j = i+1 ; j <= i+k && j < n ; j++){
                dp[j] = Math.min(dp[j], dp[i] + Math.abs(arr[j] - arr[i]));
            }
        }
        return dp[n-1];
    }


8004. Maximum sum of non-adjacent elements || EASY
    public int rob(int[] nums) {
        int n = nums.length;
        int[] dp = new int[n];

        dp[0] = nums[0];
        if(n == 1) return dp[0];

        dp[1] = Math.max(nums[0], nums[1]);
        if(n == 2) return dp[1];

        for(int i = 2 ; i < n ; i++){
            dp[i] = Math.max(nums[i] + dp[i-2] , dp[i-1]);
        } 

        return dp[n-1];
    }

8006. Ninja's Training
    public int maximumPoints(int arr[][], int n) {
        int[][] dp = new int[n][3];
        dp[0][0] = arr[0][0];
        dp[0][1] = arr[0][1];
        dp[0][2] = arr[0][2];
        
        for(int i = 1 ; i < n ; i++){
            dp[i][0] = arr[i][0] + Math.max(dp[i-1][1], dp[i-1][2]);
            dp[i][1] = arr[i][1] + Math.max(dp[i-1][2], dp[i-1][0]);
            dp[i][2] = arr[i][2] + Math.max(dp[i-1][0], dp[i-1][1]);
        }
        return Math.max(dp[n-1][0] , Math.max(dp[n-1][1], dp[n-1][2]));
    }

8007. Grid Unique Paths : DP on Grids
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];

        for(int i = 0 ; i < m ; i++){
            for(int j = 0 ; j < n ; j++){
                if(i == 0 || j == 0){
                    dp[i][j] = 1;
                }else{
                    dp[i][j] = dp[i-1][j] + dp[i][j-1];
                }
            }
        }

        return dp[m-1][n-1];
    }

8008. Grid Unique Paths 2
    public int uniquePathsWithObstacles(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        dp[0][0] = grid[0][0] == 1 ? 0 : 1;
        for(int i = 1 ; i < m ; i++){
            if(grid[i][0] == 1) break;
            else dp[i][0] = 1;
        }
        for(int j = 1 ; j < n ; j++){
            if(grid[0][j] == 1) break;
            else dp[0][j] = 1;
        }
        for(int i = 1 ; i < m ; i++){
            for(int j = 1 ; j < n ; j++){
                if(grid[i][j] == 1){
                    dp[i][j] = 0;
                }else{
                    dp[i][j] = dp[i][j-1] + dp[i-1][j];
                }
            }
        }

        return dp[m-1][n-1];
    }

8009. Minimum path sum in Grid
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        for(int i = 1 ; i < m ; i++){
            grid[i][0] = grid[i][0] + grid[i-1][0];
        }
        for(int j = 1 ; j < n ; j++){
            grid[0][j] = grid[0][j] + grid[0][j-1];
        }
        for(int i = 1 ; i < m ; i++){
            for(int j = 1 ; j < n ; j++){
                grid[i][j] = grid[i][j] + Math.min(grid[i-1][j] , grid[i][j-1]);
            }
        }
        return grid[m-1][n-1];
    }
8010. Minimum path sum in Triangular Grid || EASY
TC: N*N
SC: N*N
class Solution {
    int[][] dp;
    int INF = 1000_000_0;
    private int recursion(int i , int j , List<List<Integer>> triangle){
        if(i < 0 ) return 0;
        if(j < 0 || j > i) return INF;

        if(dp[i][j] != INF) return dp[i][j];

        return dp[i][j] = triangle.get(i).get(j) 
            + Math.min(
                recursion(i-1,j,triangle),
                recursion(i-1,j-1,triangle));
    }
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        dp = new int[n][n];
        for(int[] t: dp) Arrays.fill(t,INF);
        int ans = Integer.MAX_VALUE;
        for(int i = 0 ; i < triangle.get(n-1).size() ; i++){
            ans = Math.min(ans, recursion(n-1,i,triangle));
        }
        return ans;
    }
}


8011. Minimum/Maximum Falling Path Sum || EASY
TC: N*N
SC: N*N
public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;
        int[][] dp = new int[n][n];
        for(int[] t : dp) Arrays.fill(t,Integer.MAX_VALUE);
        for(int i = 0 ; i < n ; i++){
            dp[0][i] = matrix[0][i];
        }

        int[] dy = new int[]{0, -1, 1};
        for(int i = 1; i < n ; i++){
            for(int j = 0 ; j < n ; j++){
                for(int k = 0 ; k < 3 ; k++){
                    int row = i - 1;
                    int col = j + dy[k];

                    if(col >= 0 && col < n && dp[i][j] > dp[row][col] + matrix[i][j]){
                        dp[i][j] = dp[row][col] + matrix[i][j];
                    }
                }
            }
        }
        int ans = Integer.MAX_VALUE;
        for(int i = 0 ; i < n; i++){
            ans = Math.min(ans, dp[n-1][i]);
        }

        return ans;
    }

>>>>> DP on Subsequence <<<<<<

8013. Subset sum equal to target
TC: N*T
SC: N*t
    static Boolean isSubsetSum(int arr[], int target) {
        int n = arr.length;
        boolean[][] dp = new boolean[n+1][target+1];
        
        for(int i = 0; i <= n ; i++) dp[i][0] = true;
        
        for(int i = 1; i <= n ; i++){
            for(int j = 1 ; j <= target ; j++){
                if(arr[i-1] <= j){
                    dp[i][j] = dp[i-1][j-arr[i-1]] || dp[i-1][j];
                }else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        
        return dp[n][target];
    }

8014. Partition Equal Subset Sum || EASY
TC: N*T
SC: N*t
class Solution {
    private Boolean isSubsetSum(int arr[], int target) {
        int n = arr.length;
        boolean[][] dp = new boolean[n+1][target+1];
        
        for(int i = 0; i <= n ; i++) dp[i][0] = true;
        
        for(int i = 1; i <= n ; i++){
            for(int j = 1 ; j <= target ; j++){
                if(arr[i-1] <= j){
                    dp[i][j] = dp[i-1][j-arr[i-1]] || dp[i-1][j];
                }else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        
        return dp[n][target];
    }
    public boolean canPartition(int[] nums) {
        int sum = 0;
        for(int i : nums) sum+=i;
        return sum % 2 == 0 ? isSubsetSum(nums, sum/2) : false;
    }
}

8019. Minimum Coins || EASY || *
TC: O(N*K) // K=amount
SC: O(N*K) // K=amount
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;

        int[][] dp = new int[n+1][amount+1];
        int INF = 10001;

        Arrays.fill(dp[0],INF);
        dp[0][0] = 0;

        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <= amount ; j++){
                if(coins[i-1] <= j){
                    dp[i][j] = Math.min(1+dp[i][j-coins[i-1]], dp[i-1][j]);
                }else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }

        return dp[n][amount] >= INF ? -1 : dp[n][amount];
    }


8021. Coin Change 2 || EASY || ***
TC: O(N*K) // K=amount
SC: O(N*K) // K=amount
    public int change(int amount, int[] coins) {
        int n = coins.length;

        int[][] dp = new int[n+1][amount+1];
        int INF = 10001;

        for(int i = 0 ; i <= n ; i++) dp[i][0] = 1;
        // Arrays.fill(dp[0],INF);

        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <= amount ; j++){
                if(coins[i-1] <= j){
                    dp[i][j] = dp[i][j-coins[i-1]] + dp[i-1][j];
                }else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }

        return dp[n][amount];
    }


8022. Unbounded Knapsack || EASY
TC: O(N*K) // K=capacity
SC: O(N*K) // K=capacity

    static int knapSack(int val[], int wt[], int C) {
        int n = val.length;
        
        int[][] dp = new int[n+1][C+1];
        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <= C ; j++){
                if(wt[i-1] <= j){
                    dp[i][j] = Math.max(val[i-1] + dp[i][j-wt[i-1]] , dp[i-1][j]);
                }else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        
        return dp[n][C];
    }

8023. Rod Cutting Problem || EASY
TC: O(N*N)
SC: O(N*N)
    public int cutRod(int price[], int n) {
        int[][] dp = new int[n+1][n+1];
        
        for(int i= 1 ; i <= n ; i++){
            for(int j =1 ; j <=n ; j++){
                if(i <= j){
                    dp[i][j] = Math.max(price[i-1] + dp[i][j-i], dp[i-1][j]);
                }else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        
        return dp[n][n];
    }

>>>>>>>> DP on Strings <<<<<<<<<
8024. Longest Common Subsequence || EASY 
8024. A Recursive
TC: O(N*M)
SC: O(N*M) + O(N*M) //Because of recursive stack
class Solution {
    private int recursion(String text1, String text2, int n , int m , int[][] dp){
        if(n == 0 || m == 0) return 0;

        if(dp[n][m] != -1) return dp[n][m];

        if(text1.charAt(n-1) == text2.charAt(m-1)){
            return dp[n][m] = 1 + recursion(text1,text2,n-1,m-1,dp); 
        }else{
            return dp[n][m] = Math.max(
                recursion(text1,text2,n-1,m,dp),
                recursion(text1,text2,n,m-1,dp)
            );
        }
    }
    public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int[][] dp = new int[n+1][m+1];
        for(int[] t : dp) Arrays.fill(t,-1);

        return recursion(text1, text2, n , m , dp);
    }
}

8024. A Iterative
TC: O(N*M)
SC: O(N*M) //No recursive stack
    public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int[][] dp = new int[n+1][m+1];

        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <=m ; j++){
                if(text1.charAt(i-1) == text2.charAt(j-1)){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }else{
                    dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }

8026. Longest Common Substring || EASY
TC: O(N*M)
SC: O(N*M) //No recursive stack
//Iterative

    public int longestCommonSubstr(String s1, String s2) {
        int n = s1.length();
        int m = s2.length();
        
        int[][] dp = new int[n+1][m+1];
        int ans = 0;
        for(int i = 1 ; i <=n ; i++){
            for(int j = 1 ; j <= m ; j++){
                if(s1.charAt(i-1) == s2.charAt(j-1)){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }else{
                    dp[i][j] = 0;
                }
                
                ans = Math.max(dp[i][j], ans);
            }
        }
        
        return ans;
    }

8027. Longest Palindromic Subsequence || EASY
TC: O(N*M)
SC: O(N*M) //No recursive stack
    class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int[][] dp = new int[n+1][m+1];

        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <=m ; j++){
                if(text1.charAt(i-1) == text2.charAt(j-1)){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }else{
                    dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }

    public int longestPalindromeSubseq(String s) {
        String sr = new StringBuilder(s).reverse().toString();
        return longestCommonSubsequence(s,sr);
    }
}

8028. Minimum insertions to make string Palindrome || EASY
TC: O(N*M)
SC: O(N*M) //No recursive stack

    class Solution {
    private int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int[][] dp = new int[n+1][m+1];

        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <=m ; j++){
                if(text1.charAt(i-1) == text2.charAt(j-1)){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }else{
                    dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }

    private int longestPalindromeSubseq(String s) {
        String sr = new StringBuilder(s).reverse().toString();
        return longestCommonSubsequence(s,sr);
    }
    public int minInsertions(String s) {
        return s.length() - longestPalindromeSubseq(s);
    }
}

8029. Minimum Insertions/Deletions to Convert String || EASY
TC: O(N*M)
SC: O(N*M) //No recursive stack
class Solution {
    private int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int[][] dp = new int[n+1][m+1];

        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <=m ; j++){
                if(text1.charAt(i-1) == text2.charAt(j-1)){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }else{
                    dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }

    public int minDistance(String word1, String word2) {
        return word1.length() + word2.length() - 2*longestCommonSubsequence(word1,word2);
    }
}

8030. Shortest Common Supersequence || MEDIUM
TC: O(N*M) + O(N+M)
SC: O(N*M) //No recursive stack
class Solution {
    public String shortestCommonSupersequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        int[][] dp = new int[n+1][m+1];
        StringBuilder builder = new StringBuilder();
        for(int i = 1 ; i <= n ; i++){
            for(int j = 1 ; j <=m ; j++){
                if(text1.charAt(i-1) == text2.charAt(j-1)){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }else{
                    dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }

        int i = n, j = m;

        while(i > 0 && j > 0){
            if(text1.charAt(i-1) == text2.charAt(j-1)){
                builder.append(text1.charAt(i-1));
                i--; j--;
            }else if(dp[i-1][j] >= dp[i][j-1]){
                builder.append(text1.charAt(i-1));
                i--;
            }else{
                builder.append(text2.charAt(j-1));
                j--;
            }
        }

        while(i > 0){
            builder.append(text1.charAt(i-1)); i--;
        }

        while(j > 0){
            builder.append(text2.charAt(j-1)); j--;
        }


        return builder.reverse().toString();
    }
}


>>>>>>>> DP on Stocks <<<<<<<<<

8034. Best Time to Buy and Sell Stock || EASY
TC: O(N)
SC: O(1)

    public int maxProfit(int[] prices) {
        int buyPrice = Integer.MAX_VALUE;
        int profit = 0;
        for(int price: prices){
            profit = Math.max(profit, price - buyPrice);
            buyPrice = Math.min(buyPrice,price);
        }
        return profit;
    }

8035. Buy and Sell Stock - II || EASY || *
8035. A Recursive
TC: O(N*2) + O(N*2)
SC: O(N*2) + O(N*2)

class Solution {
    int[][] dp;
    private int recursion(int index, int isBuy, int[] prices){
        if(index >= prices.length) return 0;

        if(dp[index][isBuy] != Integer.MAX_VALUE) return dp[index][isBuy];
        if(isBuy == 1){
            return dp[index][isBuy] = Math.max(
                recursion(index+1, isBuy, prices),
                -prices[index] + recursion(index+1, 0, prices)
            );
        }else{
            return dp[index][isBuy] = Math.max(
                recursion(index+1, isBuy, prices),
                prices[index] + recursion(index+1, 1, prices)
            );
        }
    }
    public int maxProfit(int[] prices) {
        dp = new int[prices.length][2];
        for(int[] t: dp) Arrays.fill(t, Integer.MAX_VALUE);
        return recursion(0, 1, prices);
    }
}


8036. Buy and Sell Stocks III || EASY || *
8036. A
TC: O(N*2*3) + O(N*2*3)
SC: O(N*2*3) + O(N*2*3)

class Solution {
    int INF = Integer.MAX_VALUE;
    int[][][] dp;
    private int recursion(int index, int isBuy, int t, int[] prices){
        if(index >= prices.length || t >= 2) return 0;
        if(dp[index][isBuy][t] != INF) return dp[index][isBuy][t];

        if(isBuy == 1){
            return dp[index][isBuy][t] = Math.max(
                recursion(index+1, isBuy, t, prices),
                -prices[index] + recursion(index+1, 0, t, prices)
            );
        }else{
            return dp[index][isBuy][t] = Math.max(
                prices[index] + recursion(index+1, 1, t+1 , prices),
                recursion(index+1, isBuy, t , prices)
            );
        }
    }
    public int maxProfit(int[] prices) {
        dp = new int[prices.length][2][3];
        for(int[][] t : dp){
            for(int[] p : t) Arrays.fill(p,INF);
        }
        return recursion(0, 1, 0, prices);
    }
}

8037. Buy and Stock Sell IV || EASY || *
TC: O(N*2*K) + O(N*2*K)
SC: O(N*2*K) + O(N*2*K)

class Solution {
    int INF = Integer.MAX_VALUE;
    int K;
    int[][][] dp;
    private int recursion(int index, int isBuy, int t, int[] prices){
        if(index >= prices.length || t >= K) return 0;
        if(dp[index][isBuy][t] != INF) return dp[index][isBuy][t];

        if(isBuy == 1){
            return dp[index][isBuy][t] = Math.max(
                recursion(index+1, isBuy, t, prices),
                -prices[index] + recursion(index+1, 0, t, prices)
            );
        }else{
            return dp[index][isBuy][t] = Math.max(
                prices[index] + recursion(index+1, 1, t+1 , prices),
                recursion(index+1, isBuy, t , prices)
            );
        }
    }
    public int maxProfit(int k, int[] prices) {
        K = k;
        dp = new int[prices.length][2][k];
        for(int[][] t : dp){
            for(int[] p : t) Arrays.fill(p,INF);
        }
        return recursion(0, 1, 0, prices);
    }
}

8038. Buy and Sell Stocks With Cooldown || EASY || ***
8038.A Recursion //Using index + 1
TC: O(N*2) + O(N*2)
SC: O(N*2) + O(N*2)

class Solution {
    int[][] dp;
    private int recursion(int index, int isBuy, int[] prices){
        if(index >= prices.length) return 0;

        if(dp[index][isBuy] != Integer.MAX_VALUE) return dp[index][isBuy];
        if(isBuy == 1){
            return dp[index][isBuy] = Math.max(
                recursion(index+1, isBuy, prices),
                -prices[index] + recursion(index+1, 0, prices)
            );
        }else{
            return dp[index][isBuy] = Math.max(
                recursion(index+1, isBuy, prices),
                prices[index] + recursion(index+2, 1, prices)
            );
        }
    }
    public int maxProfit(int[] prices) {
        dp = new int[prices.length][2];
        for(int[] t: dp) Arrays.fill(t, Integer.MAX_VALUE);
        return recursion(0, 1, prices);
    }
}

8038.B Recursion //Using 3D DP
TC: O(N*2*3) + O(N*2*3)
SC: O(N*2*3) + O(N*2*3)

class Solution {
    int dp[][][];
    private int recursion(int[] prices, int index, int isBuy, int coolDown){
        if(index == prices.length) return 0;

        if(dp[index][isBuy][coolDown] != -1) return dp[index][isBuy][coolDown];

        if(coolDown != 0){
            return dp[index][isBuy][coolDown] = recursion(prices, index+1, isBuy, coolDown-1);
        }else if(isBuy == 1){
            return dp[index][isBuy][coolDown] = Math.max(
                - prices[index] + recursion(prices, index + 1, 0, 0),
                recursion(prices, index + 1, 1, 0)
            );
        }else{
            return dp[index][isBuy][coolDown] = Math.max(
                + prices[index] + recursion(prices, index+1, 1, 1),
                recursion(prices, index+1, 0,0)
            );
        }
    }
    public int maxProfit(int[] prices) {
        int n = prices.length;
        dp = new int[n][2][2];

        for(int p[][] : dp){
            for(int q[] : p){
                Arrays.fill(q,-1);
            }
        }
        return recursion(prices, 0 , 1, 0);
    }
}

8039. Buy and Sell Stocks With Transaction Fee || EASY 
8039. A Recursive
TC: O(N*2) + O(N*2)
SC: O(N*2) + O(N*2)

class Solution {
    int[][] dp;
    int F;
    private int recursion(int index, int isBuy, int[] prices){
        if(index >= prices.length) return 0;

        if(dp[index][isBuy] != Integer.MAX_VALUE) return dp[index][isBuy];
        if(isBuy == 1){
            return dp[index][isBuy] = Math.max(
                recursion(index+1, isBuy, prices),
                -prices[index] - F + recursion(index+1, 0, prices)
            );
        }else{
            return dp[index][isBuy] = Math.max(
                recursion(index+1, isBuy, prices),
                prices[index] + recursion(index+1, 1, prices)
            );
        }
    }
    public int maxProfit(int[] prices, int fee) {
        F = fee;
        dp = new int[prices.length][2];
        for(int[] t: dp) Arrays.fill(t, Integer.MAX_VALUE);
        return recursion(0, 1, prices);
    }
}