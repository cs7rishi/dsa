1. Bit Manipulation || MEDIUM || *

    static void bitManipulation(int num, int i) {
        int t = 0;
        if((num & (1<<(i-1))) != 0) t = 1;
        System.out.print(t + " ");
        
        t = (num | (1 << (i-1)));
        System.out.print(t + " ");
        
        t = (num & ~(1 << (i-1)));
        System.out.print(t + " ");
    }

2. K-th Bit is Set or Not
    static boolean checkKthBit(int n, int k) {
        return (n & (1 << (k))) != 0 ? true : false;
        
    }

3.Odd or Even || EASY
    static String oddEven(int n) {
        return (n&1) == 1 ? "odd" : "even";
    }

4. Power of Two || EASY || *
    public boolean isPowerOfTwo(int n) {
        if(n <= 0) return false;
        return (n & (n-1)) == 0 ? true : false;

    }

5. Count total set bits || MEDIUM || ***
    public static int countSetBits(int n){
        int count = 0;
        int x = 2;
        n++;
        while(x/2 < n){
            int q = n/x;
            count += q * (x/2);
            
            int remainder = n % x;
            if(remainder > x/2) count += remainder - x/2;
            
            x*=2;
        }
        return count; 
    }


6. Set the rightmost unset bit || EASY
    static int setBit(int n) {
        int k = 1;
        while((n & (1<<(k-1))) != 0){
            k++;
        }
        return (n | (1<<(k-1)));
    }

7. Swap two numbers || EASY || *
    static List<Integer> get(int a,int b)
    {
        a = a^b;
        b = a^b;
        a = a^b;
        return new ArrayList<>(List.of(a,b));
    }

8. Minimum Bit Flips to Convert Number || EASY || *
TC: O(log(max(start,goal)))
SC: O(1)
    public int minBitFlips(int start, int goal) {
        int xor = start ^ goal;
        int k = 1;
        int count = 0;
        while(xor >= (1 << (k-1))){
            if((xor & (1 << (k-1))) != 0) count++;
            k++;
        }
        return count;       
    }

9. Subsets || Medium || *
TC: O(2^n*n)
SC: O(2^n*n)
    public List<List<Integer>> subsets(int[] nums) {
       int n = nums.length;
       List<List<Integer>> subsets = new ArrayList<>();
       for(int i = 0 ; i < Math.pow(2,n) ; i++){
            int k = 1;
            List<Integer> subset = new ArrayList<>();
            while((1 << (k-1)) <= i){
                if((i & (1 << (k-1))) != 0) subset.add(nums[k-1]);
                k++;
            }
            subsets.add(subset);
       } 

       return subsets;
    }

10. Two numbers with odd occurrences || Medium || ***
10.A
TC: O(n + n)
SC: O(1)
    public int[] twoOddNum(int Arr[], int N)
    {
        int xor = 0;
        for(int num : Arr) xor ^= num;
        
        int k = 1;
        while((xor & (1 << (k-1))) == 0){
            k++;
        }
        
        int p = 0;
        int q = 0;
        
        for(int a : Arr){
            if((a & (1 << (k-1))) == 0){
                p ^= a;
            }else{
                q ^= a;
            }
        }
        
        return new int[]{Math.max(p,q), Math.min(p,q)};
    }

10.B
TC: O(n)
SC: O(n/2)
    public int[] twoOddNum(int Arr[], int N)
    {
        Set<Integer> st = new HashSet<>();
        
        for(int num : Arr){
            if(st.contains(num)){
                st.remove(num);
            }else{
                st.add(num);
            }
        }
        
        List<Integer> t = new ArrayList<>(st);
        Collections.sort(t,(a,b) -> b-a);
        return new int[]{t.get(0), t.get(1)};
    }

11. XOR of numbers in a given range || EASY || *
TC: O(1)
SC: O(1)
class Solution {
    public static int xor(int n){
        if(n % 4 == 1){
            return 1;
        } else if(n % 4 == 2){
            return n + 1;
        } else if(n % 4 == 3){
            return 0;  
        } else 
            return n;
    }
    public static int findXOR(int l, int r) {
        return xor(r) ^ xor(l-1);
    }
}

12.A.
TC: O(N*sqrt(N))
SC: Depends, can't predict
class Solution
{
    public boolean checkPrime(int N){
        for(int i = 2 ; i * i <= N ; i++){
            if(N % i == 0) return false;
        }
        return true;
    }
    public int[] AllPrimeFactors(int N)
    {
        List<Integer> factor = new ArrayList<>();
        for(int i = 2 ; i <= N ; i++){
            
            if(N % i == 0 && checkPrime(i)){
                factor.add(i);
            }
        }
        
        int[] ans = new int[factor.size()];
        for(int i = 0 ; i < ans.length ; i++){
            ans[i] = factor.get(i);
        }
        return ans;
    }
}
12.B.
TC: O(sqrt(N)*sqrt(N)) approximate
SC: Depends, can't predict

class Solution
{
    public boolean checkPrime(int N){
        if(N == 0 || N == 1) return false;
        
        for(int i = 2 ; i * i <= N ; i++){
            if(N % i == 0) return false;
        }
        return true;
    }
    public int[] AllPrimeFactors(int N)
    {
        List<Integer> factor = new ArrayList<>();
        for(int i = 1 ; i * i <= N ; i++){
            
            if(N % i == 0){
                
                if(checkPrime(i)){ // only performed for factors only
                    factor.add(i);
                }
                
                if(N / i != i && checkPrime(N/i)){
                    factor.add(N/i);
                }
            }
        }
        Collections.sort(factor);
        int[] ans = new int[factor.size()];
        for(int i = 0 ; i < ans.length ; i++){
            ans[i] = factor.get(i);
        }
        return ans;
    }
}

12.C.
TC: O(sqrt(N)*log(N)) approximate, worst case
SC: Depends, can't predict
    public int[] AllPrimeFactors(int N)
    {
        List<Integer> factor = new ArrayList<>();
        
        for(int i = 2 ; i * i <= N ; i++){
            if(N % i == 0){
                factor.add(i);
                while(N % i == 0){
                    N /= i;
                }
            }
        }
        
        if(N != 1) factor.add(N);
        
        int n = factor.size();
        int ans[] = new int[n];
        for(int i = 0 ; i < n ; i++){
            ans[i] = factor.get(i);
        }
        
        return ans;
    }


13. All Divisors of a Number || Fundamental || *
TC: O(sqrt(N))
SC: O() can't be predicted
    public static void print_divisors(int n) {
        List<Integer> divisor = new ArrayList<>();
        for(int i = 1 ; i * i <= n ; i++){
            if(n % i == 0){
                divisor.add(i);
                
                if(n / i != i)
                divisor.add(n/i);
            }
        }
        
        Collections.sort(divisor);
        for(int d : divisor){
            System.out.print(d + " ");
        }
    }

14. Sieve of Eratosthenes || Fundamental || *
TC: O(N) + O(NloglogN) + O(N) -> Prime Harmonic Sequence
SC: O(N)
class Solution {
    private int[] calSeive(int n){
        int arr[] = new int[n+1];
        Arrays.fill(arr,1);

        for(int i = 2 ; i * i <= n ; i++){
            if(arr[i] == 1){
                for(int j = i*i ; j <= n ; j+=i){
                    arr[j] = 0;
                }
            }
        }

        return arr;
    }
    public int countPrimes(int n) {
        int[] seive = calSeive(n);
        int count = 0;
        for(int i = 2 ; i < n ; i++){
            if(seive[i] == 1){
                count++;
            }
        }
        return count; 
    }
}

15. Find Prime Factorisation of a Number using Sieve || EASY || *
TC: O(NloglogN)
SC: O(N)
class Solution {
    // You must implement this function
    static int[] s;
    static int N = 2_000_05;
    static void sieve() {
        s = new int[N+1];
        for(int i = 2 ; i <= N ; i++){
            s[i] = i;
        }
        // Arrays.fill(s,1);
        for(int i = 2 ; i * i <= N ; i++){
            // if(s[i] == 1){
            if(s[i] == i){
                for(int j = i * i ; j <= N ; j+=i){
                    s[j] = i;
                }
            }
        }
    }

    static List<Integer> findPrimeFactors(int N) {
        List<Integer> ans = new ArrayList<>();
        while(N > 1){
            int f = s[N];
            // if(f == 1){
            //     ans.add(N);
            //     break;
            // }
            ans.add(f);
            N /= f;
        }
        
        Collections.sort(ans);
        return ans;
    }
}