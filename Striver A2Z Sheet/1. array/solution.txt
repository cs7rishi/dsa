1001.Two Sum

1001.a TC: N^2
    SC: 0(1)

class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i = 0 ; i < nums.length; i++){
            for(int j = i + 1 ; j < nums.length; j++){
                if(nums[i] + nums[j] == target) return new int[]{i,j};
            }
        }

        return new int[]{};
    }
}

1001.b TC : O(n)
    SC : O(n)

class Solution {
    public int[] twoSum(int[] nums, int target) {
        //Integer,Index
        Map<Integer,Integer> mp = new HashMap<>();
        for(int i = 0 ; i < nums.length; i++){
            int required = target - nums[i];
            if(mp.containsKey(required)){
                return new int[]{mp.get(required),i};
            }

            mp.put(nums[i],i);
        }

        return new int[]{};
    }
}

1002. Sort Colors
0.... low - 1 => 0
low ..... mid-1 => 1
high+1 .....n-1 => 2
 class Solution {
    private void swap(int[] nums, int i , int j){
        int t = nums[i];
        nums[i] = nums[j];
        nums[j] = t;
    }
    public void sortColors(int[] nums) {
        int low = -1;
        int mid = 0;
        int high = nums.length-1;

        while(mid <= high){
            if(nums[mid] == 0){
                low++;
                swap(nums,low,mid);
                mid++;
            }else if(nums[mid] == 1){
                mid++;
            }else{
                swap(nums, mid, high);
                high--;
            }
        }

        System.out.println(Arrays.toString(nums));
    }
}

1003.Majority Element
class Solution {
    public int majorityElement(int[] nums) {
        int ele = 0;
        int count = 0;

        for(int t : nums){
            if(count == 0){
                ele = t;
                count = 1;
            }else{
                if(ele == t){
                    count++;
                }else{
                    count--;
                }
            }
        }
        return ele;
    }
}

1004.Maximum Subarray
class Solution {
    public int maxSubArray(int[] nums) {
        int INF = -10000;
        int ms = INF;
        int meh = INF;

        for(int i = 0 ; i < nums.length ; i++){
            meh = Math.max(meh + nums[i], nums[i]);
            ms = Math.max(meh, ms);
        }

        return ms;
    }
}

1005.Leaders in an Array problem
class Solution {
    static ArrayList<Integer> leaders(int arr[]) {
        Stack<Integer> st = new Stack<>();
        for(int i = arr.length-1 ; i >= 0 ; i--){
            if(st.isEmpty() || st.peek() <= arr[i]){
                st.push(arr[i]);
            }
        }
        ArrayList<Integer> ans = new ArrayList<>();
        while(!st.isEmpty()){
            ans.add(st.pop());
        }
        
        return ans;
    }
}


1006.Longest Consecutive Sequence in an Array *** 

1006.a. TC: O(nlogn + n)
     SC: O(1)
class Solution {
    public int findLongestConseqSubseq(int[] arr) {
        Arrays.sort(arr);
        int ans = 1;
        int meh = 1;
        for(int i = 1 ; i < arr.length ; i++){
            if(arr[i] == arr[i-1]) continue;
            else if(arr[i]-arr[i-1] == 1){
                meh++;
            }else{
                ans = Math.max(ans,meh);
                meh = 1;
            }
        }
        ans = Math.max(ans,meh);
        return ans;
    }
}

1006.b TC: O(n + n)
    SC: O(n)
class Solution {
    public int findLongestConseqSubseq(int[] arr) {
        Set<Integer> st = new HashSet<>();
        for(int i: arr){
            st.add(i);
        }
        int ans = 1;
        for(int i: arr){
            if(!st.contains(i-1)){
                int num = i;
                int count = 1;
                while(st.contains(num+1)){
                    count++;
                    num++;
                }
                ans = Math.max(count,ans);
            }
        }
        return ans;
    }
}

1007.Set Matrix Zeroes *
1007.a TC: O(2*n*m)
    SC: O(n+m)
class Solution {
    public void setZeroes(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        int[] row = new int[n];
        int[] col = new int[m];
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                if(matrix[i][j] == 0){
                    row[i] = -1;
                    col[j] = -1;
                }
            }
        } 
        for(int i = 0; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                if(row[i] == -1 || col[j] == -1){
                    matrix[i][j] = 0;
                }
            }
        }
    }
}

1007.b TC: O(2*n*m)
    SC: O(1)

class Solution {
    public void setZeroes(int[][] matrix) {
        int zeroCol = 1;
        int n = matrix.length;
        int m = matrix[0].length;
        for(int i = 0; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                if(matrix[i][j] == 0){
                    if(j == 0){
                        zeroCol = 0;
                        matrix[i][0] = 0;
                    }else{
                         matrix[i][0] = 0;
                        matrix[0][j] = 0;
                    }
                }                
            }
        }

        for(int i = 1 ; i < n ; i++){
            for(int j = 1 ; j < m ; j++){
                if(matrix[i][0] == 0 || matrix[0][j] == 0){
                    matrix[i][j] = 0;
                }
            }
        }
        //If initially filled these inidices, whole matrix could become zero
        if(matrix[0][0] == 0) Arrays.fill(matrix[0],0);

        if(zeroCol == 0){
            for(int i = 0 ; i < n ; i++){
                matrix[i][0] = 0;
            }
        }

    }
}

1009. Rotate Array
1009.a TC: O(2*n)
    SC: O(n)
class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        k %= n;

        int[] ans = new int[n];
        for(int i= 0 ; i < n ; i++){
            int j = (i + k) % n;
            System.out.println(i + " " + j);
            ans[j] = nums[i];
        }

        for(int i = 0 ; i < n ; i++){
            nums[i] = ans[i];
        }
    }
}

1009.b TC: O(n)
    SC: O(1)

class Solution {
    private void reverse(int[] array, int i ,int j){
        int low = i ;
        int high = j;

        while(low <= high){
            int t = array[low];
            array[low] = array[high];
            array[high] = t;

            low++;
            high--;
        }
    }
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        k%=n;
        reverse(nums, 0,n-k-1);
        reverse(nums, n-k, n-1);
        reverse(nums,0,n-1);
    }
}

1011. Longest subarray with sum K (Positives + Negatives)
//Prefix Map
TC: O(n)
SC: O(n) 

class Solution {
    public static int lenOfLongSubarr(int A[], int N, int K) {
        Map<Integer,Integer> prefixMap = new HashMap<>();
        int prefixSum = 0;
        int ans = 0;
        prefixMap.put(prefixSum, -1);
        for(int i = 0 ; i < N ; i++){
            prefixSum += A[i];
            int subtract = prefixSum - K;
            if(prefixMap.containsKey(subtract)){
                ans = Math.max(ans, i - prefixMap.get(subtract));
            }   
            if(!prefixMap.containsKey(prefixSum)){
                prefixMap.put(prefixSum,i);
            }
        }
        return ans;
    }
}

1012. Subarray Sum Equals K
//Prefix Map
TC: O(n)
SC: O(n) 

class Solution {
    public int subarraySum(int[] nums, int k) {
        //sum, count
        Map<Long,Integer> preMap = new HashMap<>();
        preMap.put(0L,1);
        long preSum = 0L;
        int subCount = 0;
        for(int i : nums){
            preSum += i;
            long subtract = preSum - k;

            if(preMap.containsKey(subtract)){
                subCount += preMap.get(subtract);
            }

            preMap.put(preSum, preMap.getOrDefault(preSum,0)+1);
        }

        return subCount;
    }
}


1013. Majority Element II

TC : O(n + n)
SC : O(1)
    public List<Integer> majorityElement(int[] nums) {
        int INF = 1000_000_001;
        int count_a = 0;
        int a = INF;
        int count_b = 0;
        int b = INF;

        for(int i : nums){
            if(count_a == 0 && i != b){
                a = i;
            }else if(count_b == 0 && i != a){
                b = i;
            }

            if(i == a){
                count_a++;
            }else if(i == b){
                count_b++;
            }else{
                count_a--;
                count_b--;
            }
        }

        count_a = 0;
        count_b = 0;

        for(int i : nums){
            if(i == a) count_a++;
            else if(i == b) count_b++;
        }

        int mn = (int)(nums.length / 3)+1;
        List<Integer> ans = new ArrayList<>();
        if(count_a >= mn) ans.add(a);
        if(count_b >= mn) ans.add(b);


        return ans;
    }

1014. 3Sum

1014.a 
TC: O(n^3*log(k) k is no. of unique triplet, not considering the time complexity of sorting the element)
SC: O(2*k) k is unique triplet

public List<List<Integer>> threeSum(int[] nums) {
    Set<List<Integer>> st = new HashSet<>();
    for(int i = 0 ; i < nums.length ; i++){
        for(int j = i+1 ; j < nums.length ; j++){
            for(int k = j+1; k < nums.length ; k++){
                if(nums[i] + nums[j] + nums[k] == 0){
                    List<Integer> arr = new ArrayList<>(List.of(nums[i], nums[j], nums[k]));
                    Collections.sort(arr);
                    st.add(arr);
                }
            }
        }
    }
    List<List<Integer>> ans = new ArrayList<>();
    for(List<Integer> list : st){
        ans.add(list);
    }
    return ans;
}

1014.b
TC: O(n^2*log(k), k is unique triplet, log(k) required to add in the set)
SC: O(k(st) + k(arr) + n(preSet))
public List<List<Integer>> threeSum(int[] nums) {
    Set<List<Integer>> st = new HashSet<>();
    for(int i = 0 ; i < nums.length ; i++){
        Set<Integer> preSet = new HashSet<>();
        for(int j = i+1 ; j < nums.length ; j++){
            int required = -(nums[i] + nums[j]);
            if(preSet.contains(required)){
                List<Integer> arr = new ArrayList<>(List.of(nums[i], nums[j], required));
                Collections.sort(arr);
                st.add(arr); //contribute toward complexity
            }
            preSet.add(nums[j]);
        }
    }
    List<List<Integer>> ans = new ArrayList<>(st); <<<<<<<<<<<<<<<<< how 2d list is created from set
    return ans;
}

1014.c
TC: O(n^2)
SC: O(k , where k is all the triplets)
//Handle the case of duplicates

    public List<List<Integer>> threeSum(int[] nums) {
        int n = nums.length;
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        for(int i = 0 ; i < n ; i++){
            
            int low = i + 1;
            int high = n - 1;

            while(low < high){
                int sum = nums[low] + nums[high];
                if(sum == -nums[i]){
                    ans.add(List.of(nums[i],nums[low],nums[high]));
                    while(low < high && nums[low+1] == nums[low]){
                        low++;
                    }
                    low++;
                    while(low < high && nums[high-1] == nums[high]){
                        high--;
                    }
                    high--;
                }else if(sum > -nums[i]){
                    high--;
                }else{
                    low++;
                }
            }
            while(i < n && i+1 < n && nums[i+1] == nums[i]){
                i++;
            }
        }
        return ans;
    }



1015. Largest subarray with 0 sum
TC: O(n)
SC: O(n)
    int maxLen(int arr[], int n)
    {
        Map<Integer,Integer> mp = new HashMap<>();
        mp.put(0,-1);
        int preSum = 0;
        int ans = 0;
        for(int i = 0; i < arr.length ; i++){
            preSum += arr[i];
            
            if(mp.containsKey(preSum)){
                ans = Math.max(ans, i - mp.get(preSum));
            }
            
            if(mp.get(preSum) == null){
                mp.put(preSum, i);
            }
        }
        
        return ans;
    }


1016. Subarray with given XOR
    public int solve(int[] A, int B) {
        Map<Integer,Integer> mp = new HashMap<>();
        mp.put(0,1); <<<<<<<<<<<<<<<< important
        int count = 0;
        int preXor = 0;
        for(int i = 0 ; i < A.length ; i++){
            preXor ^= A[i];
            int required = preXor ^ B;
            
            count+= mp.getOrDefault(required,0);
        
            mp.put(preXor, mp.getOrDefault(preXor,0)+1);
        }
        
        return count;
    }

1017. 4Sum
1017.a
TC: O(n^4*log(k), where k is no of the quadraple)
SC: O(2*k)

    public List<List<Integer>> fourSum(int[] nums, int target) {
        int n = nums.length;
        Set<List<Integer>> st = new HashSet<>();
        for(int i = 0 ; i < n ; i++){
            for(int j = i+1 ; j < n ; j++){
                for(int k = j+1 ; k < n ; k++){
                    for(int l = k+1 ; l < n ; l++){
                        if(nums[i] + nums[j] + nums[k] + nums[l] == target){
                            List<Integer> list = new ArrayList<>(List.of(nums[i], nums[j], nums[k], nums[l]));
                            Collections.sort(list);
                            st.add(list);
                        }
                    }
                }
            }
        }
        List<List<Integer>> ans = new ArrayList<>(st);
        return ans;
    }

1017.b //take care of long numbers;
TC: O(n^3*logk)
SC: O(k)
    public List<List<Integer>> fourSum(int[] nums, int target) {
        int n = nums.length;
        Set<List<Integer>> ansSet = new HashSet<>();
        for(int i = 0 ; i < n ; i++){
            for(int j = i+1 ; j < n ; j++){
                long total = target - (long)nums[i] - (long)nums[j];
                Set<Long> hashSet = new HashSet<>();
                for(int k = j+1 ; k < n ; k++){
                    long required = total - (long)nums[k];
                    if(hashSet.contains(required)){
                        List<Integer> list = new ArrayList<>(List.of(nums[i], nums[j], nums[k] , (int)required));
                        Collections.sort(list);
                        ansSet.add(list);
                    }
                    hashSet.add((long)nums[k]);
                }
            }
        }
        List<List<Integer>> ans = new ArrayList<>(ansSet);
        return ans;
    }

1017.c
TC: O(n^3)
SC: O(k)

public List<List<Integer>> fourSum(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        for(int i = 0 ; i < nums.length ; i++){
            for(int j = i+1 ; j < nums.length ; j++){
                long total = target - (long) nums[i] - (long) nums[j];
                int low = j + 1 , high = nums.length - 1;
                while(low < high){
                    // System.out.println(low + " " + high);
                    long sum = (long)nums[low] + (long)nums[high];
                    if(sum == total){
                        List<Integer> list = new ArrayList<>(List.of(nums[i],nums[j], nums[low],nums[high]));
                        ans.add(list);
                        while(low < high && low + 1 < high && nums[low] == nums[low+1])low++;
                        while(low < high && low < high - 1 && nums[high-1] == nums[high])high--;
                        low++;
                        high--;
                    }else if(sum < total){
                        low++;
                    }else{
                        high--;
                    }
                }
                while(j < nums.length && j + 1 < nums.length && nums[j] == nums[j+1]) j++;
            }
            while(i < nums.length && i + 1 < nums.length && nums[i] == nums[i+1]) i++;
        }
        return ans;
    }

1020. Find the repeating and missing number
TC: O(n)
SC: O(1)
    ArrayList<Integer> findTwoElement(int arr[]) {
        int n = arr.length;
        int xor = 0;
        for(int i = 0 ; i < n ; i++){
            xor ^= arr[i];
            xor ^= i+1;
        }
        
        int k = 0;
        while((xor & (1 << k)) == 0){
            k++;
        }
        
        int g1 = 0, g2 = 0;
        for(int i = 0 ; i < n ; i++){
            if((arr[i] & (1 << k)) != 0){
                g1 ^= arr[i];
            }else{
                g2 ^= arr[i];
            }
            
            if(((i+1) & (1 << k)) != 0){
                g1 ^= i+1;
            }else{
                g2 ^= i+1;
            }
        }
        
        int c1 = 0 , c2 = 0;
        
        for(int i : arr){
            if(i == g1){
                c1++;
            }
            
            if(i == g2){
                c2++;
            }
        }
        
        ArrayList<Integer> ans = new ArrayList<>();
        ans.add(c1 == 2 ? g1 : g2);
        ans.add(c1 == 0 ? g1 : g2);
        return ans;
    }

1021. Count Inversion
TC: O(NlogN)
SC: O(N for storing the sorted array)

class Solution {
    static int merge(int arr[], int l , int mid , int r){
        int[] sorted = new int[r-l+1];
        int i = l , j = mid+1, k = 0;
        int count = 0;
        
        while(i <= mid && j <= r){
            if(arr[i] > arr[j]){
                sorted[k++] = arr[j++];
                count+= mid - i + 1;;
            }else{
                sorted[k++] = arr[i++];
            }
        }
        
        while(i <= mid){
            sorted[k++] = arr[i++];
        }
        
        while(j <= r){
            sorted[k++] = arr[j++];
        }
        
        for(int z = l ; z <= r ; z++){
            arr[z] = sorted[z-l];
        }
        
        return count;
    }
    static int mergeSort(int[] arr, int l , int r){
        if(r-l+1 <= 1) return 0;
        int mid = l + (r-l)/2;
        return mergeSort(arr, l , mid) 
            + mergeSort(arr, mid+1, r) 
            + merge(arr, l , mid, r);
    }
    // Function to count inversions in the array.
    static int inversionCount(int arr[]) {
        return mergeSort(arr,0, arr.length-1);
    }
}

1022. Reverse Pairs
TC: O(2*NlogN, because we are counting pairs in mergeSort)
SC: O(N)
class Solution {
    private int countPair(int[] nums, int l , int mid, int r){
        int count = 0;
        int i = mid;
        int j = r;

        while(i >= l && j >= mid+1){
            while(j >= mid+1 && (long) nums[i] <= 2 * (long)nums[j]){
                j--;
            }
            count += (j - (mid+1)) + 1;
            i--;
        }
        return count;
    }
    private int merge(int[] nums, int l , int mid, int r){
        int[] sorted = new int[r-l+1];
        int i = l , j = mid + 1 , k = 0;
        int count = 0;

        count += countPair(nums, l, mid, r);
        while(i <= mid && j <= r){
            if(nums[i] <= nums[j]){
                sorted[k++] = nums[i++];
            }else{
                sorted[k++] = nums[j++];
            }
        }


        while(i <= mid) sorted[k++] = nums[i++];
        while(j <= r) sorted[k++] = nums[j++];
        for(int z = l ; z <= r ; z++){
            nums[z] = sorted[z-l];
        }
        return count;
    }
    private int mergeSort(int[] nums, int l , int r){
        if(r-l+1 <= 1) return 0;
        int mid = l + (r-l)/2;
        return mergeSort(nums, l, mid)
        + mergeSort(nums, mid+1, r)
        + merge(nums, l, mid, r);
    }
    public int reversePairs(int[] nums) {
        return mergeSort(nums, 0, nums.length-1);
    }
}
1023. Check if Array Is Sorted and Rotated || EASY || ***
TC: O(N)
SC: O(1)
class Solution {
    public boolean check(int[] nums) {
        int count = 0;

        for(int i = 1 ; i < nums.length ; i++){
            if(nums[i-1] > nums[i]) count++;

            if(count > 1) return false;
        }

        return count == 1 ? nums[0] >= nums[nums.length-1] : true;
    }
}

1024. https://leetcode.com/problems/next-permutation/ || Medium || ***
TC: O(N)
SC: O(1)
class Solution {
    private void reverse(int[] nums, int start, int end){
        while(start <= end){
            int temp = nums[end];
            nums[end] = nums[start];
            nums[start] = temp;

            start++;
            end--;
        }
    }
    private void swap(int[] nums, int i , int k){
        int temp = nums[k];
        nums[k] = nums[i];
        nums[i] = temp;
    }
    public void nextPermutation(int[] nums) {
        int index = -1, n = nums.length;
        for(int i = n - 2 ; i >= 0 ; i--){
            // System.out.println(i + " " + (i+1));
            if(nums[i] < nums[i+1]){
                index = i;
                // System.out.println(index + " " + nums[index]);
                break;
            }
        }

        if(index == -1){
            reverse(nums,0,n-1);
        }else{
            for(int i = n-1 ; i > index ; i--){
                if(nums[i] > nums[index]){
                    swap(nums, i, index);
                    // System.out.println(Arrays.toString(nums));
                    reverse(nums,index+1,n-1);
                    // System.out.println(Arrays.toString(nums));
                    break;
                }
            }
        }
    }
}


1025. Spiral Matrix
TC: O(n*m);
SC: O(1);
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;

        int left = 0 , top = 0;
        int bottom = m - 1 , right = n - 1;

        List<Integer> ans = new ArrayList<>();

        while(left <= right && top <= bottom){
            for(int i = left ; i <= right; i++){
                ans.add(matrix[top][i]);
            }
            top++;

            for(int i = top ; i <= bottom ; i++){
                ans.add(matrix[i][right]);
            }
            right--;

            if(top <= bottom){
                for(int i = right ; i >= left ; i--){
                    ans.add(matrix[bottom][i]);
                }
                bottom--;
            }
            
            if(left <= right){
                for(int i = bottom ; i >= top ; i--){
                    ans.add(matrix[i][left]);
                }
                left++;
            }
        }

        return ans;
    }
}

1026.Maximum Score from Subarray Minimums || Medium || ***
class Solution {
    // Function to find pair with maximum sum
    public int pairWithMaxSum(int arr[]) {
        int ans = 0;
        int n = arr.length;    
        for(int i = 1 ; i < n ; i++){
            ans = Math.max(ans, arr[i-1] + arr[i]);
        }
        
        return ans;
    }
}