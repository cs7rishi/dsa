7001. BFS || EASY
https://www.geeksforgeeks.org/problems/bfs-traversal-of-graph/1

7002. DFS || EASY
https://www.geeksforgeeks.org/problems/depth-first-traversal-for-a-graph/1

7003. Number of provinces || EASY
//Plain BFS while parent loop for unvisited
//Try Union Find Logic
https://leetcode.com/problems/number-of-provinces/submissions/1451226182/


7004. Connected Components Problem in Matrix || EASY
https://www.geeksforgeeks.org/problems/number-of-provinces/1

7005. Rotten Oranges || EASY
//https://leetcode.com/problems/rotting-oranges/description/

7006. Flood Fill || EASY || *
//In graph, always think of if isVisited array is required or not
//For flood fill, if initial == finalColor, don't iterate
https://leetcode.com/problems/flood-fill/

7007. 01 Matrix || EASY
https://leetcode.com/problems/01-matrix/description/

7008. Surrounded Regions || EASY
https://leetcode.com/problems/surrounded-regions/description/

7008. Number of Enclaves || EASY
https://leetcode.com/problems/number-of-enclaves/description/

7009. Undirected Graph Cycle DFS || EASY || Concept || *
https://www.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1
//Parent and isVisited to be used 
//Require Parent to check if neghbour node is parent or cycle present
//In DFS, always mark as isVisited, as soon as visit a node

7010. Undirected Graph Cycle BFS || EASY || Concept || *
https://www.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1
//Similar to Above
//Check the code implementation

7011. Word Ladder || Medium || ***
https://leetcode.com/problems/word-ladder/
//Figure why removing from set is required
//Nice implementation

7012. Word Ladder II || Medium || ***


7013. Cycle Detection in Directed Graph (DFS) || Medium || ***
https://leetcode.com/problems/course-schedule-ii/description/
//Logic is different from undirected, need to maintain path also
//Go through java implementation too


>>>>>> Topology Sort <<<<<<<

7014. Topo Sort DFS || Medium || *** 
https://www.geeksforgeeks.org/problems/topological-sort/1
//Fundamental
//Uses Stack with DFS
//Position of stack addition and reversal is important

7015. Kahn's Algorithm || Medium || ***
https://www.geeksforgeeks.org/problems/topological-sort/1
//Fundamental
//No isVisited is required, works on inDegree

7016. Cycle Detection in Directed Graph (BFS) || Kahn' Algo || ***
https://www.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1
//Uses Kahn's Algo
//If topo sort size is not equals to V, cycle present

7016. Course Schedule - I  || EASY 
https://leetcode.com/problems/course-schedule/
//Easy Kahn Algo implementation

7016. Course Schedule - II || EASY 
https://leetcode.com/problems/course-schedule-ii/
//Easy Kahn Algo implementation

7017. Find eventual safe states || EASY || PENDING || *
https://leetcode.com/problems/find-eventual-safe-states/description/
//Check for better solution


7018. Alien dictionary

>>>>>> Shortest Path <<<<<<<

7019. Shortest Path in UG with unit weights || EASY
https://www.geeksforgeeks.org/problems/shortest-path-in-undirected-graph-having-unit-distance/1
//0-1 BFS implementation

7020. Shortest Path in DAG || PENDING
//Use TopoSort for this question

7021. Djisktra's Algorithm || EASY || *
https://www.geeksforgeeks.org/problems/implementing-dijkstra-set-1-adjacency-matrix/1
// Fundamental, we could remove the isVisited array from the code
// Memorize the algo
// TC: 
//Dense GraphPQ: â€ŠO(N^2 + M)
//Sparse Graph:  O(NlogN + M)

7022. Why priority Queue is used in Djisktra's Algorithm
https://bit.ly/3Et6alk
Time Complexity: O( E log(V) )
Space Complexity: O( |E| + |V| )

7023. Shortest path in a binary maze || EASY || *
//BFS could also be used without size, if using dist array to calculate new distance
https://leetcode.com/problems/shortest-path-in-binary-matrix/

7024. Path with minimum effort || EASY 
https://leetcode.com/problems/path-with-minimum-effort/

7025. Cheapest flights within k stops || Medium || ***
//Fundamental Code for Djisktra
//Djisktra is obvious choice, but simple Queue could be used
//As we need to iterate through all the stop combination
//And Complexity reduces by logN
https://leetcode.com/problems/cheapest-flights-within-k-stops/

7026. Network Delay time || EASY || Fundamental
//Bellman Fundamental
//Bellman could be used too
https://leetcode.com/problems/network-delay-time/

7027. Number of ways to arrive at destination || Medium || ***
//Important to handle addition using long type variable
https://leetcode.com/problems/number-of-ways-to-arrive-at-destination/

7028. Minimum steps to reach end from start by performing multiplication 
and mod operations with array elements || Medium || *** 
//Use Queue instead of PriorityQueue
//Because, steps are increasing automatically, therefore we could use Queue
//Similar to Brute Force
https://bit.ly/3QAEsrY

7029. Bellman Ford || Fundamental || *
https://practice.geeksforgeeks.org/problems/distance-from-the-source-bellman-ford-algorithm/1

7030. Floyd Warshal Algorithm || Fundamental || *
//Edge could contain -ve weight, make sure to use INFINITY for evaluating inplace
//Important check if i->k and k->j edges are present, otherwise, can't be relaxed
https://practice.geeksforgeeks.org/problems/implementing-floyd-warshall2042/1

7031. Find the city with the smallest number of neighbors in a threshold distance || EASY || *
https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/

7032. Prim's Algorithm || Fundamental || *
// Use pair for just finding the MST total weight;

7033.Kruskal's Algorithm / UnionByRank/ UnionBySize || Fundamental || **
//Use Disjoint for dynamic graph
https://www.geeksforgeeks.org/problems/minimum-spanning-tree/1

7034. Number of operations to make network connected || EASY
https://leetcode.com/problems/number-of-operations-to-make-network-connected/

7035. Most stones removed with same rows or columns || Medium || ***
//Could be solved using DFS
//Important is the naming of row of col to perform operations
//Size of parent array is important
https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/

7036. Accounts merge || MEDIUM || ***
//Always use ds.findParent for finding parent
https://leetcode.com/problems/accounts-merge/

7037. Number of island II
https://leetcode.com/problems/number-of-islands-ii/description/

7038. Making a Large Island || MEDIUM || ***
//DFS could be used
https://leetcode.com/problems/making-a-large-island/

7039. Swim in rising water || Pending
https://leetcode.com/problems/swim-in-rising-water/description/
