7001. BFS || Easy
TC: O(2E+N) // we visit each node twice, from either side parent-child and child-parent
SC: O(3N)

    public ArrayList<Integer> bfsOfGraph(ArrayList<ArrayList<Integer>> adj) {
        int n = adj.size();
        boolean isVisited[] = new boolean[n];
        
        Queue<Integer> q = new LinkedList<>();
        q.add(0);
        isVisited[0] = true;
        
        ArrayList<Integer> ans = new ArrayList<>();
        
        while(!q.isEmpty()){
            int node = q.poll();
            ans.add(node);    
            for(Integer t : adj.get(node)){
                if(!isVisited[t]){
                    q.add(t);
                    isVisited[t] = true;
                }
            }
        }
        
        return ans;
    }

7002. DFS || EASY
TC: O(2E+N) // we visit each node twice, from either side parent-child and child-parent
SC: O(3N)
class Solution {
    ArrayList<Integer> ans = new ArrayList<>();
    public void dfs(ArrayList<ArrayList<Integer>> adj, int node, boolean[] isVisited){
        if(isVisited[node]) return;
        ans.add(node);
        isVisited[node] = true;
        for(int t : adj.get(node)){
            dfs(adj, t, isVisited);
        }
    }
    public ArrayList<Integer> dfsOfGraph(ArrayList<ArrayList<Integer>> adj) {
        int n = adj.size();
        boolean[] isVisited = new boolean[n];
        dfs(adj, 0, isVisited);
        return ans;
    }
}

7003. Number of provinces || EASY
TC: O(N) + O(2E+N) // we visit each node twice, from either side parent-child and child-parent
SC: O(N)
class Solution {
    private void bfs (int node, boolean[] isVisited, int[][] isConnected){
        int n = isVisited.length;
        Queue<Integer> q = new LinkedList<>();
        q.add(node);
        isVisited[node] = true;
        while(!q.isEmpty()){
            int t = q.poll();
            for(int i = 0; i < n ; i++){
                if(isConnected[t][i] == 1 && !isVisited[i]){
                    q.add(i);
                    isVisited[i] = true;
                }
            }
        }
    }
    public int findCircleNum(int[][] isConnected) {
        int n = isConnected.length;
        boolean[] isVisited = new boolean[n];
        int province = 0;
        for(int i = 0 ; i < n ; i++){
            if(!isVisited[i]){
                province++;
                bfs(i,isVisited, isConnected);
            }
        }
        return province;
    }
}

7004. Connected Components Problem in Matrix || EASY
TC: O(N) + O(2E+N) // we visit each node twice, from either side parent-child and child-parent
SC: O(N) + O(N) recursion

class Solution {
    static void dfs(int u, ArrayList<ArrayList<Integer>> adj , boolean[] isVisited){
        int n = isVisited.length;
        if(isVisited[u]) return;
        
        isVisited[u] = true;
        
        for(int i = 0 ; i < n ; i++){
            if(adj.get(u).get(i) == 1)
                dfs(i,adj,isVisited);
        }
    }
    static int numProvinces(ArrayList<ArrayList<Integer>> adj, int V) {
        boolean[] isVisited = new boolean[V];
        Queue<Integer> q = new LinkedList<>();
        int p = 0;
        for(int i = 0 ; i < V ; i++){
            if(!isVisited[i]){
                p++;
                dfs(i, adj, isVisited);
            }
        }
        
        return p;
    }
};

7005. Rotten Oranges || EASY
TC: O(4*N*M + N*M)
SC: O(N*M)
    public int orangesRotting(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int total = 0;
        int rotten = 0;
        Queue<Pair<Integer,Integer>> q = new LinkedList<>();
        for(int i = 0 ; i < m ; i++){
            for(int j = 0 ; j < n ; j++){
                if(grid[i][j] == 2){
                    q.add(new Pair(i,j));
                    total++;
                }
                else if(grid[i][j] == 1) total++;
            }
        } 

        if(rotten == total) return 0;

        int time = -1;
        int[] dx = new int[]{1,-1,0,0};
        int[] dy = new int[]{0,0,-1,1};

        while(!q.isEmpty()){
            int size = q.size();
            time++;
            while(size-- > 0){
                int row = q.peek().getKey();
                int col = q.peek().getValue();

                q.poll();
                rotten++;

                for(int k = 0 ; k < 4 ; k++){
                    int adjRow = row + dx[k];
                    int adjCol = col + dy[k];

                    if(adjRow >= 0 && adjRow < m && adjCol >= 0 && adjCol < n && grid[adjRow][adjCol] == 1){
                        grid[adjRow][adjCol] = 2;
                        q.add(new Pair(adjRow, adjCol));
                    }
                }
            }
        }
        return total == rotten ? time : -1;
    }

7006. Flood Fill || EASY || *
TC: O(4*N*M)
SC: O(N*M)
    public int[][] floodFill(int[][] image, int sr, int sc, int color) {
        int m = image.length;
        int n = image[0].length;
        int initColor = image[sr][sc];

        Queue<Pair<Integer,Integer>> q = new LinkedList<>();
        q.add(new Pair(sr,sc));

        int[] dx = new int[]{1,-1,0,0};
        int[] dy = new int[]{0,0,-1,1};
        while(!q.isEmpty()){
            int row = q.peek().getKey();
            int col = q.peek().getValue();
            image[row][col] = color;
            q.poll();
            for(int k = 0 ; k < 4 ; k++){
                int adjRow = row + dx[k];
                int adjCol = col + dy[k];
                //************************************** below condition is important
                if(adjRow >= 0 && adjRow < m && adjCol >= 0 && adjCol < n && image[adjRow][adjCol] != color && image[adjRow][adjCol] == initColor){
                    q.add(new Pair(adjRow,adjCol));
                }
            }
        }
        return image;
    }

7007. 01 Matrix || EASY
TC: O(4*N*M + N*M)
SC: O(2*N*M)
    public int[][] updateMatrix(int[][] mat) {
        int m = mat.length;
        int n = mat[0].length;

        int[][] ans = new int[m][n];
        Queue<Pair<Integer,Integer>> q = new LinkedList<>();

        for(int i = 0 ; i < m ; i++){
            for(int j = 0 ; j < n ; j++){
                if(mat[i][j] == 1){
                    ans[i][j] = Integer.MAX_VALUE;
                }else{
                    q.add(new Pair(i,j));
                }
            }
        }

        int dist = 0;
        int[] dx = new int[]{1,-1,0,0};
        int[] dy = new int[]{0,0,-1,1};
        while(!q.isEmpty()){
            int size = q.size();
            dist++;
            while(size-- > 0){
                int row = q.peek().getKey();
                int col = q.peek().getValue();
                q.poll();

                for(int i = 0 ; i < 4 ; i++){
                    int adjRow = row + dx[i];
                    int adjCol = col + dy[i];

                    if(adjRow >= 0 && adjRow < m && adjCol >= 0 && adjCol < n && ans[adjRow][adjCol] > dist){
                        ans[adjRow][adjCol] = dist;
                        q.add(new Pair(adjRow, adjCol));
                    }
                }

            }
        }
        return ans;
    }

7008. Surrounded Regions || EASY
TC: O(4*N*M + N*M)
SC: O(4*N*M)

class Solution {
    private int[] dx = new int[]{1,-1,0,0};
    private int[] dy = new int[]{0,0,-1,1};
    private void dfs(char[][] board, int row, int col, int m, int n){
        if(row < 0 || col < 0 || row >= m || col >= n || board[row][col] == '#' || board[row][col] == 'X') return;

        board[row][col] = '#';
        for(int k = 0 ; k < 4 ; k++){
            int adjRow = row + dx[k];
            int adjCol = col + dy[k];
            dfs(board, adjRow, adjCol, m, n);
        }
    }
    public void solve(char[][] board) {
        int m = board.length;
        int n = board[0].length;

        for(int i = 0 ; i < m ; i++){
            if(board[i][0] == 'O'){
                dfs(board, i, 0, m , n);
            }

            if(board[i][n-1] == 'O'){
                dfs(board,i ,n-1, m, n);
            }
        }

        for(int j = 0 ; j < n ; j++){
            if(board[0][j] == 'O'){
                dfs(board, 0, j, m , n);
            }

            if(board[m-1][j] == 'O'){
                dfs(board, m-1, j, m, n);
            }
        }

        for(int i = 0 ; i < m ; i++){
            for(int j= 0 ; j < n ; j++){
                if(board[i][j] == '#'){
                    board[i][j] = 'O';
                }else{
                    board[i][j] = 'X';
                }
            }
        }
    }
}

7008. Number of Enclaves || EASY
TC: O(4*N*M) 
SC: O(N)
public int numEnclaves(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int count = 0;

        Queue<int[]> q = new LinkedList<>();

        for(int i = 0 ; i < m ; i++){
            for(int j = 0 ; j < n ; j++){
                if(grid[i][j] == 1){
                    count++;
                    if(i == 0 || i == m-1 || j == 0 || j == n-1){
                        q.add(new int[]{i,j});
                        count--;
                        grid[i][j] = 0;
                    } 
                }
            }
        }
        int[] dx = new int[]{1,-1,0,0};
        int[] dy = new int[]{0,0,-1,1};

        while(!q.isEmpty()){
            int row = q.peek()[0];
            int col = q.peek()[1];
            q.poll();

            for(int i = 0 ; i < 4 ; i++){
                int adjRow = row + dx[i];
                int adjCol = col + dy[i];

                if(adjRow < 0 || adjCol < 0 || adjRow >= m || adjCol >= n) continue;
                else if(grid[adjRow][adjCol] == 1){
                    grid[adjRow][adjCol] = 0;
                    count--;
                    q.add(new int[]{adjRow,adjCol});
                }
            }
        }

        return count;
    }

7009. Undirected Graph Cycle || EASY || Concept || *
TC: O(N + 2E) 
SC: O(N) + O(N) ~ O(N)
class Solution {
    boolean[] isVisited;
    public boolean dfs(int root, ArrayList<ArrayList<Integer>> adj, int parent){
        if(isVisited[root]) return true;
        isVisited[root] = true;
        boolean temp = false;
        for(int i = 0 ; i < adj.get(root).size() ; i++){
            if(!isVisited[adj.get(root).get(i)]){
                temp |= dfs(adj.get(root).get(i), adj, root);
            }else if(adj.get(root).get(i) != parent){
                temp |= true;
            }
        }
        return temp;
    }
    public boolean isCycle(ArrayList<ArrayList<Integer>> adj) {
        int n = adj.size();
        isVisited = new boolean[n];
        for(int i = 0 ; i < n ; i++){
            if(!isVisited[i] && dfs(i, adj, -1)){
                return true;
            }
        }
        return false;
    }
}

7010. Undirected Graph Cycle BFS || EASY || Concept || *
TC: O(N + 2E) 
SC: O(N) + O(N) ~ O(N)
class Solution {
    public boolean bfs(int root, ArrayList<ArrayList<Integer>> adj, boolean[] isVisited){
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{root, -1});
        isVisited[root] = true;
        
        while(!q.isEmpty()){
            int u = q.peek()[0];
            int parent = q.peek()[1];
            q.poll();
            
            for(int i = 0 ; i < adj.get(u).size(); i++){
                int v = adj.get(u).get(i);
                if(!isVisited[v]){
                    isVisited[v] = true;
                    q.add(new int[]{v,u});
                }else if(v != parent) return true;
            }
        }
        return false;
    }
    public boolean isCycle(ArrayList<ArrayList<Integer>> adj) {
        int n = adj.size();
        boolean[] isVisited = new boolean[n];
        for(int i = 0 ; i < n ; i++){
            if(!isVisited[i] && bfs(i, adj, isVisited)) return true;
        }
        return false;
    }
}

7011. Word Ladder || Medium || ***
TC: O(N*26) 
SC: O(N)
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> st = new HashSet<>(wordList);
        if(!st.contains(endWord)) return 0;
        Queue<Pair<String,Integer>> q = new LinkedList<>();
        q.add(new Pair(beginWord,1));
        while(!q.isEmpty()){
            String initWord = q.peek().getKey();
            int step = q.peek().getValue();
            q.poll();
            for(int i = 0 ; i < initWord.length() ; i++){
                char current = initWord.charAt(i);
                for(int j = 0 ; j < 26 ; j++){
                    char nextChar = (char)('a' + j);
                    if(current == nextChar) continue;
                    else {
                        char[] charArray = initWord.toCharArray();
                        charArray[i] = nextChar;
                        String newString = new String(charArray);
                        if(newString.equals(endWord)) return step+1;
                        if(st.contains(newString)){
                            st.remove(newString);
                            q.add(new Pair(newString, step+1));
                        }
                    }
                }
            }
        } 
        return 0;
    }

7013. Cycle Detection in Directed Graph (DFS) || Medium || ***
TC: O(V+E) + O(V) 
SC: O(2N) + O(N)

class Solution {
    private boolean isCycle(int node, ArrayList<Integer> ans, boolean[] isVisited, boolean[] isPath, ArrayList<ArrayList<Integer>> adjList){
        isVisited[node] = true;
        isPath[node] = true;

        for(int v : adjList.get(node)){
            if(isPath[v]){
                return true;
            }
            else if(!isVisited[v]){
                if(isCycle(v,ans,isVisited,isPath,adjList)){
                    return true;
                }
            }
        }

        ans.add(node);
        isPath[node] = false;
        return false;
    }
    public int[] findOrder(int numCourses, int[][] pre) {
        ArrayList<ArrayList<Integer>> adjList = new ArrayList<>();
        for(int i = 0 ; i < numCourses ; i++) adjList.add(new ArrayList<>());

        for(int i = 0 ; i < pre.length; i++){
            int v = pre[i][0];
            int u = pre[i][1];

            adjList.get(u).add(v);
        }

        boolean isVisited[] = new boolean[numCourses];
        boolean path[] = new boolean[numCourses];
        boolean flag = false;
        ArrayList<Integer> ans = new ArrayList<>();

        for(int i = 0 ; i < numCourses ; i++){
            if(!isVisited[i]){
                if(isCycle(i,ans, isVisited, path, adjList)){
                    flag = true;
                    break;
                }
            }
        }

        if(flag == true){
            return new int[]{};
        }
        Collections.reverse(ans);
        int[] order = new int[numCourses];
        for(int i = 0 ; i < numCourses; i++){
            order[i] = ans.get(i);
        }
        return order;
    }
}


7014. Topo Sort DFS || Medium || ***
//DFS code
TC: O(V+E) + O(V) 
SC: O(2N) + O(N)

class Solution {
    // Function to return list containing vertices in Topological order.
    static void dfs(int node, boolean[] isVisited, Stack<Integer> st, ArrayList<ArrayList<Integer>> adj){
        isVisited[node] = true;
        for(int v : adj.get(node)){
            if(!isVisited[v]){
                dfs(v, isVisited, st, adj);
            }
        }
        st.add(node);
        
    }
    static ArrayList<Integer> topologicalSort(ArrayList<ArrayList<Integer>> adj) {
        int n = adj.size();
        boolean isVisited[] = new boolean[n];
        ArrayList<Integer> order = new ArrayList<>();
        Stack<Integer> st = new Stack<>();
        
        for(int i = 0 ; i < n ; i++){
            if(!isVisited[i]){
                dfs(i, isVisited, st, adj);
            }
        }
        
        while(!st.isEmpty()){
            order.add(st.pop());
        }
        
        return order;
        
    }
}

7015. Kahn's Algorithm || Medium || ***
TC: O(V+E) + O(V) 
SC: O(2N) + O(N) // Usually Striver don't consider space for ans, calculation

    static ArrayList<Integer> topologicalSort(ArrayList<ArrayList<Integer>> adj) {
        int n = adj.size();
        int[] inDegree = new int[n];
        Queue<Integer> q = new LinkedList<>();
        ArrayList<Integer> ans = new ArrayList<>();
        for(int i = 0 ; i < n ; i++){
            for(int v : adj.get(i)){
                inDegree[v]++;
            }
        }
        
        for(int i = 0 ; i < n ; i++){
            if(inDegree[i] == 0) q.add(i);
        }
        
        
        while(!q.isEmpty()){
            int u = q.poll();
            ans.add(u);
            
            for(int v : adj.get(u)){
                inDegree[v]--;
                
                if(inDegree[v] == 0)q.add(v);
            }
        }
        
        return ans;
    }

7017. Find eventual safe states || EASY || PENDING || *
TC: O(V+E) + O(VlogV) 
SC: O(N) Queue + O(N) inDegree + O(N) adjList

    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n = graph.length;
        List<Integer> ans = new ArrayList<>();
        int[] inDegree = new int[n];
        List<List<Integer>> adjList = new ArrayList<>();
        for(int i = 0 ; i < n ; i++) adjList.add(new ArrayList<>());

        for(int u = 0 ; u < graph.length; u++){
            for(int j = 0 ; j < graph[u].length ; j++){
                int v = graph[u][j];
                adjList.get(v).add(u);
                inDegree[u]++;
            }
        }

        Queue<Integer> q = new LinkedList<>();
        for(int i = 0 ; i < n ; i++){
            if(inDegree[i] == 0) q.add(i);
        }

        while(!q.isEmpty()){
            int u = q.poll();
            ans.add(u);

            for(int v : adjList.get(u)){
                inDegree[v]--;
                if(inDegree[v] == 0) q.add(v);
            }
        }

        Collections.sort(ans);
        return ans;
    }

7019. Shortest Path in UG with unit weights || EASY
TC: O(N+2M)
SC: O(N+M) O(N) Queue + O(N) isVisite + O(N) distance
    public int[] shortestPath(int[][] edges,int n,int m ,int src) {
        ArrayList<ArrayList<Integer>> adjList = new ArrayList<>();
        for(int i = 0 ; i < n ; i++) adjList.add(new ArrayList<>());
        
        for(int i = 0 ; i < edges.length; i++){
            int u = edges[i][0];
            int v = edges[i][1];
            
            adjList.get(u).add(v);
            adjList.get(v).add(u);
        }
        
        boolean isVisited[] = new boolean[n];
        int[] ans = new int[n];
        Queue<Integer> q = new LinkedList<>();
        
        Arrays.fill(ans,-1);
        ans[src] = 0;
        q.add(src);
        int dist = 0;
        
        while(!q.isEmpty()){
            int size = q.size();
            dist++;
            
            while(size-- > 0){
                int u = q.poll();
                isVisited[u] = true;
                for(int v : adjList.get(u)){
                    if(!isVisited[v]){
                        q.add(v);
                        isVisited[v] = true;
                        ans[v] = dist;
                    }    
                }
            }
        }
        
        return ans;
    }